{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["About","className","width","height","viewBox","id","x1","x2","y1","y2","offset","stopColor","x","y","patternUnits","d","mask","fill","attributeName","begin","dur","type","from","to","repeatCount","textAnchor","fillOpacity","List","props","state","error","isLoaded","articles","fetch","then","res","json","result","setState","this","map","article","key","title","Component","Article","handleBack","match","params","articleId","body","userId","App","post","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e9c04ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n} from \"react-router-dom\";\n\nfunction About() {\n  const about = '五十鈴川';\n  return <div className='about'>\n    <svg className='svg-about' width=\"400\" height=\"200\" viewBox=\"30 -10 40 40\">\n      <defs>\n        <linearGradient id=\"gradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n          <stop offset=\"10%\" stopColor=\"#58B2DC\" />\n          <stop offset=\"95%\" stopColor=\"#81C7D4\" />\n        </linearGradient>\n        <pattern id=\"wave\" x=\"0\" y=\"0\" width=\"120\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n          <path id=\"wavePath\" d=\"M-40 9 Q-30 7 -20 9 T0 9 T20 9 T40 9 T60 9 T80 9 T100 9 T120 9 V20 H-40z\" mask=\"url(#mask)\" fill=\"url(#gradient)\">\n            <animateTransform\n              attributeName=\"transform\"\n              begin=\"0s\"\n              dur=\"2.5s\"\n              type=\"translate\"\n              from=\"0,0\"\n              to=\"40,0\"\n              repeatCount=\"indefinite\" />\n          </path>\n        </pattern>\n      </defs>\n      <text textAnchor=\"middle\" x=\"50\" y=\"15\" fill=\"url(#gradient)\" fillOpacity=\"0.5\">{about}</text>\n      <text textAnchor=\"middle\" x=\"50\" y=\"15\" fill=\"url(#wave)\" fillOpacity=\"0.8\">{about}</text>\n    </svg>\n  </div>\n}\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      articles: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            articles: result,\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, articles } = this.state;\n    if (error) {\n      return <div>{error}</div>;\n    }\n    else if (!isLoaded) {\n      return <div className='loading'>loading...</div>;\n    }\n    else {\n      return (\n        <div className='list-group'>\n          {articles.map(article =>\n            <Link key={article.id} className='list-group__item' to={`/article/${article.id}`}>\n              <div className='list-group__id'>{article.id}</div>\n              <div className='list-group__title'>{article.title}</div>\n            </Link>)}\n        </div >\n      );\n    }\n  }\n}\n\nclass Article extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      article: [],\n      id: this.props.match.params.articleId\n    };\n  }\n\n  handleBack = () => {\n    this.id = '';\n  }\n\n  componentDidMount() {\n    const { id } = this.state;\n    fetch(`https://jsonplaceholder.typicode.com/posts/${id}`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            article: result\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, article } = this.state;\n    if (error) {\n      return <div>{error}</div>;\n    }\n    else if (isLoaded) {\n      return <div className='loading'>loading...</div>;\n    }\n    else {\n      return (\n        <div className='article'>\n          <div className='article__title'>\n            Title: {article.title}\n          </div>\n          <div className='article__content'>\n            {article.body}\n          </div>\n          <div className='article__user'>\n            User: {article.userId}\n          </div>\n          <Link className='btn__back' to={'/list'}>Back</Link>\n        </div>)\n    }\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: '',\n      id: ''\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className='wrapper'>\n          <header>\n            <div className=\"container\">\n              <div className='header__img'></div>\n              <div className='navbar'>\n                <Link className='navbar__btn navbar__btn__about' to={'/about'}>\n                  ABOUT\n              </Link>\n                <Link className='navbar__btn navbar__btn__list' to={'/list'}>\n                  LIST\n              </Link>\n              </div>\n            </div >\n          </header >\n          <main>\n            <div className='main__background'></div>\n            <div className='main__content'>\n              <Route exact path='/' component={List} />\n              <Route path='/about' component={About} />\n              <Route path='/list' component={List} />\n              <Route path='/article/:articleId' component={Article} />\n            </div>\n          </main>\n          <footer>Made by Ponchimeow</footer>\n        </div >\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}